
import time
import servo
servos = servo.servo_control()
import _thread
lock = _thread.allocate_lock()
###########################
# servo 
servo_table = {\
"1--": 1, "2--": 2,"3--": 3,"4--": 4,"5--": 5,"6--": 6,"7--": 7,
"1-": 8, "2-": 9,"3-": 10,"4-": 11,"5-": 12,"6-": 13,"7-": 14,
"1": 15, "2": 16,"3": 17,"4": 18,"5": 19,"6": 20,"7": 21,
"1+": 22, "2+": 23,"3+": 24,"4+": 25,"5+": 26,"6+": 27,"7+": 28,
"1++": 29, "2++": 30,"3++": 31,"4++": 32,"5++": 33,"6++": 34,"7++": 35,
"1+++": 36, "2+++": 37,"3+++": 38,"4+++": 39,"5+++": 40,"6+++": 41,"7+++": 42,
}

###########################
music_table = \
(
    (("5++", "1++", "7+"), "-", "-", "-", "-", "-", "-", "-"),
    (("2+", "1+", "4"), "-", "-", "-", "-", "-", "-", "-"),

    (("2++", "7+", "5+"), "-", "-", "-", "-", "-", "-", "-"),
    (("2+", "7", "3"), "-", "-", "-", "-", "-", "-", "-"),

    ("6+", "7+", "1++", "3++", "1++", "7+", "6+", "7+", "-"),
    (("2+", "1+", "4"), "-", "-", "-", "-", "-", "-", "-"),

    ("1++",  "-", "-", "-", "-", "-", "-", "-"),
    ("0", "-", "-", "-", "-", "-", "-", "-"),

##############################################
    ("3+", "2+", "3+", "6+", "3+", "2+", "3+", "7+"),
    (("1", "4-"), "-", "-", "-", ("2", "5-"), "-", "-", "-"),

    ("3+", "2+", "3+", "1++", "7+", "-", "5+", "-"),
    (("3", "6-"), "-", "-", "-",  "-", "-", "-", "-"),

    ("3+", "2+", "3+", "6+", "3+", "2+", "3+", "7+"),
    (("1", "4-"), "-", "-", "-", ("2", "5-"), "-", "-", "-"),

    ("5+", "-", "1+", "-", "7", "-", "5", "-"),
    ("6-", "3", "6", "3", "0", "-", "-", "-"),
##############################################
    ("3+", "2+", "3+", "6+", "3+", "2+", "3+", "7+"),
    (("1", "4-"), "-", "-", "-", ("2", "5-"), "-", "-", "-"),

    ("3+", "2+", "-", "3+", "1++", "-", "7+", "-", "5+", "-"),
    (("3", "6-"), "-", "-", "-", "-", "-", "-", "-"),

    ("2+", "3+", "6+", "-", "2+", "3+", "6+", "5+"),
    ("2-", "6-", "2", "-", "3", "7-", "3", "-"),

    ("6", "-", "-", "-", "-", "-", "-", "-"),
    ("6--", "3-", "6-", "7-", "1", "-", "-", "-"),
##############################################
    ("0", "1+", "1+", "2+", "2+", "3+", "3+", "6+"),
    ("6-", "1", "4", "-", "-", "-", "1", "-"),

    ("5+", "-", "-", "3+", "2+", "-", "-", "-"),
    ("3-", "7-", "3", "-", "-", "-", "2", "-"),

    ("6", "1+", "1+", "2+", "2+", "3+", "3+", "-"),
    ("6-", "1", "4", "-", "-", "-", "1", "-"),

    ("6", "5", "5", "-", "3+", "-", "5", "-"),
    ("3-", "7-", "3", "-", "-", "-", "-", "-"),
)

music_tableXXXX = \
(
    ("5++,1++,7+", "-", "-", "-"),
    ("2+,1+,4", "-", "-", "-"),

    ("2++,7+,5+", "-", "-", "-"),
    ("2+,7,3", "-", "-", "-"),

    (("6+", "7+"), ("1++", "3++"), ("1++", "7+"), ("6+", "7+")),
    ("2+,1+,4", "-", "-", "-"),

    ("1++",  "-", "-", "-"),
    ("0", "-", "-", "-"),

##############################################
    (("3+", "2+"), ("3+", "6+"), ("3+", "2+"), ("3+", "7+")),
    ("1,4-", "-", "2,5-", "-"),

    (("3+", "2+"), ("3+", "1++"), "7+", "5+"),
    ("3,6-", "-", "-", "-"),

    (("3+", "2+"), ("3+", "6+"), ("3+", "2+"), ("3+", "7+")),
    ("1,4-", "-", "2,5-", "-"),

    ("5+", "1+", "7", "5"),
    (("6-", "3"), ("6", "3"), "0", "-"),
##############################################
    (("3+", "2+"), ("3+", "6+"), ("3+", "2+"), ("3+", "7+")),
    ("1,4-", "-", "2,5-", "-"),


    (("3+", "2+"), ("3+", "1++"), "7+", "5+"),
    ("3,6-", "-", "0", "-"),

    (("2+", "3+"), "6", ("2+", "3+"), ("6", "5")),
    (("2-", "6-"), "2", ("3", "7-"), "3"),

    ("6", "-", "-", "-"),
    (("6--", "3-"), ("6-", "7-"), "1", "-"),
##############################################
    (("6", "1+"), ("1+", "2+"), ("2+", "3+"), ("3+", "6+")),
    (("6-", "1"), "4", "-", "1"),

    ("5+", "3+", "2+", "-"),
    ("3-", "7-", "3", "-", "-", "-", "2", "-"),

    (("6", "1+"), ("1+", "2+"), ("2+", "3+"), "3+"),
    ("6-", "1", "4", "-", "-", "-", "1", "-"),

    (("6", "5"), "-", "3+", "5"),
    ("3-", "7-", "3", "-", "-", "-", "-", "-"),
)


def play(tone):
    if tone == "0":
        return 
    servos.set_single_angle(servo_table[tone] - 8, 30)

    # print("{} play".format(tone))

def stop(tone):
    if tone == "0":
        return 

    servos.set_single_angle(servo_table[tone] - 8, 65)

    # print("{} stop".format(tone))

BEAT_T = 3.2
def rest(beat, t = BEAT_T):
    last_t = time.time()
    while time.time() - last_t < beat * t:
        pass

def rest_t(t = 0.1):
    last_t = time.time()
    while time.time() - last_t < t:
        pass


last_t1 = time.time()
def parse_music(music):
    global last_t1

    last_tone_1 = []
    

    for i in range(len(music) // 2):
        for j in range(4):
            chor = music[2 * i][j]
            if chor != '-':
                for item in last_tone_1:
                    stop(item)
                    servos.run()
                rest_t(0.05)
                last_tone_1 = []

            else:
                rest(1 / 8)
                continue

            if isinstance(chor, str):
                if ',' in chor:
                    chors = chor.split(",")
                    for item in chors:
                        play(item)
                        last_tone_1.append(item)
                        servos.run()
                        rest_t(0.15)
                elif chor != "-":
                    play(chor)
                    last_tone_1.append(chor)
                    servos.run()
                               
            elif isinstance(chor, tuple):
                for k in range(len(chor)):
                    if k >= 1:
                        stop(last_tone_1.pop())
                    play(chor[k])
                    last_tone_1.append(chor[k])
                    servos.run()
                    rest(1 / 8)
            while time.time() - last_t1 < BEAT_T / 4:
                time.sleep(0.01)

            last_t1 = time.time()
            
last_t2 = time.time()
def parse_music2(music):
    global last_t2
    last_tone_1 = []
    last_tone_2 = []

    for i in range(len(music) // 2):
        for j in range(4):
            while time.time() - last_t2 < BEAT_T / 4:
                time.sleep(0.01)

            last_t2 = time.time()

            chor1 = music[2 * i][j]
            chor = music[2 * i + 1][j]
            if chor != '-':
                for item in last_tone_1:
                    stop(item)
                    servos.run()
                last_tone_1 = []

            else:
                rest(1/4)
                continue

            if isinstance(chor, str):
                if ',' in chor:
                    chors = chor.split(",")
                    for item in chors:
                        play(item)
                        last_tone_1.append(item)
                        servos.run()
                        rest_t(0.15)
                elif chor != "-":
                    play(chor)
                    last_tone_1.append(chor)
                    servos.run()
                               
            elif isinstance(chor, tuple):
                for k in range(len(chor)):
                    if k >= 1:
                        stop(last_tone_1.pop())
                    play(chor[k])
                    last_tone_1.append(chor[k])
                    servos.run()
                    rest(1 / 8)


def init():
    time.sleep(1)
    for i in range(32):
        servos.run_single_servo(i, 90)
    servos.run()
init()

# while True:
#     init()
#     parse_music(music_tableXXXX)

#     init()

_thread.start_new_thread(parse_music, (music_tableXXXX, ))
# _thread.start_new_thread(parse_music2, (music_tableXXXX, ))

time.sleep(100)